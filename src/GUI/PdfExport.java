package GUI;


import com.itextpdf.text.*;
import com.itextpdf.text.pdf.PdfPCell;
import com.itextpdf.text.pdf.PdfPTable;
import com.itextpdf.text.pdf.PdfWriter;

import java.io.FileOutputStream;
import java.util.Date;

public class PdfExport {

    private static String FILE = "C:\\Users\\danilodjurovic\\Desktop\\MasterTeam Brojacica\\Sample.pdf";
    private static Font catFont = new Font(Font.FontFamily.TIMES_ROMAN, 18,
            Font.BOLD);
    private static Font redFont = new Font(Font.FontFamily.TIMES_ROMAN, 12,
            Font.NORMAL, BaseColor.RED);
    private static Font subFont = new Font(Font.FontFamily.TIMES_ROMAN, 16,
            Font.BOLD);
    private static Font smallBold = new Font(Font.FontFamily.TIMES_ROMAN, 12,
            Font.BOLD);
    private static String[] denomination = {"RSD", "0", "4", "5", "4", "3", "0", "0", "0", "0", "1330"};

    public static void main(String[] args) {
        try {
            Document document = new Document();
            PdfWriter.getInstance(document, new FileOutputStream(FILE));
            document.open();
            addMetaData(document);
            addTitlePage(document, "Korisnik", new Date(), "Danilo");
            addContent(document);
            document.close();
            System.out.println(denomination.length);
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    private static void addMetaData(Document document) {
        document.addTitle("My first PDF");
        document.addSubject("Using iText");
        document.addKeywords("Java, PDF, iText");
        document.addAuthor("Lars Vogel");
        document.addCreator("Lars Vogel");
    }

    private static void addTitlePage(Document document, String user, Date date, String client)
            throws DocumentException {
        Paragraph preface = new Paragraph();
        // We add one empty line
        addEmptyLine(preface, 1);
        // Lets write a big header
        preface.add(new Paragraph("Izveštaj o transakciji", catFont));

        addEmptyLine(preface, 1);
        // Will create: Report generated by: _name, _date
        preface.add(new Paragraph(
                "Izveštaj generisao: " + user + ", " + date, //$NON-NLS-1$ //$NON-NLS-2$ //$NON-NLS-3$
                smallBold));
        addEmptyLine(preface, 2);

        preface.add(new Paragraph("Klijent: " + client, smallBold));

        addEmptyLine(preface, 1);

        preface.add(new Paragraph(
                "Apoenska struktura transakcije",
                smallBold));

        addEmptyLine(preface, 2);

        document.add(preface);
        document.add(createTable(denomination));
        // Start a new page
        //document.newPage();
    }

    private static void addContent(Document document) throws DocumentException {
        Anchor anchor = new Anchor("First Chapter", catFont);
        anchor.setName("First Chapter");

        // Second parameter is the number of the chapter
        Chapter catPart = new Chapter(new Paragraph(anchor), 1);

        Paragraph subPara = new Paragraph("Subcategory 1", subFont);
        Section subCatPart = catPart.addSection(subPara);
        subCatPart.add(new Paragraph("Hello"));

        subPara = new Paragraph("Subcategory 2", subFont);
        subCatPart = catPart.addSection(subPara);
        subCatPart.add(new Paragraph("Paragraph 1"));
        subCatPart.add(new Paragraph("Paragraph 2"));
        subCatPart.add(new Paragraph("Paragraph 3"));

        // add a list
        createList(subCatPart);
        Paragraph paragraph = new Paragraph();
        addEmptyLine(paragraph, 5);
        subCatPart.add(paragraph);

        // add a table
        //createTable(subCatPart, denomination);

        // now add all this to the document
        document.add(catPart);

        // Next section
        anchor = new Anchor("Second Chapter", catFont);
        anchor.setName("Second Chapter");

        // Second parameter is the number of the chapter
        catPart = new Chapter(new Paragraph(anchor), 1);

        subPara = new Paragraph("Subcategory", subFont);
        subCatPart = catPart.addSection(subPara);
        subCatPart.add(new Paragraph("This is a very important message"));

        // now add all this to the document
        document.add(catPart);

    }

    private static PdfPTable createTable(String[] denomination)
            throws BadElementException {
        PdfPTable table = new PdfPTable(3);

        // t.setBorderColor(BaseColor.GRAY);
        // t.setPadding(4);
        // t.setSpacing(4);
        // t.setBorderWidth(1);

        PdfPCell c1 = new PdfPCell(new Phrase("Apoen - " + denomination[0]));
        c1.setHorizontalAlignment(Element.ALIGN_CENTER);
        table.addCell(c1);

        c1 = new PdfPCell(new Phrase("Broj komada"));
        c1.setHorizontalAlignment(Element.ALIGN_CENTER);
        table.addCell(c1);

        c1 = new PdfPCell(new Phrase("Vrednost"));
        c1.setHorizontalAlignment(Element.ALIGN_CENTER);
        table.addCell(c1);
        table.setHeaderRows(denomination.length - 1);

        if (denomination[0].equals("RSD")) {
            table.addCell("10");
            table.addCell(denomination[1]);
            table.addCell(String.valueOf(10*Integer.parseInt(denomination[1])));
            table.addCell("20");
            table.addCell(denomination[2]);
            table.addCell(String.valueOf(20*Integer.parseInt(denomination[2])));
            table.addCell("50");
            table.addCell(denomination[3]);
            table.addCell(String.valueOf(50*Integer.parseInt(denomination[3])));
            table.addCell("100");
            table.addCell(denomination[4]);
            table.addCell(String.valueOf(100*Integer.parseInt(denomination[4])));
            table.addCell("200");
            table.addCell(denomination[5]);
            table.addCell(String.valueOf(200*Integer.parseInt(denomination[5])));
            table.addCell("500");
            table.addCell(denomination[6]);
            table.addCell(String.valueOf(500*Integer.parseInt(denomination[6])));
            table.addCell("1000");
            table.addCell(denomination[7]);
            table.addCell(String.valueOf(1000*Integer.parseInt(denomination[7])));
            table.addCell("2000");
            table.addCell(denomination[8]);
            table.addCell(String.valueOf(2000*Integer.parseInt(denomination[8])));
            table.addCell("5000");
            table.addCell(denomination[9]);
            table.addCell(String.valueOf(5000*Integer.parseInt(denomination[9])));
            table.addCell("Ukupno:");
            table.addCell("16");
            table.addCell(denomination[10]);
        }

        return table;

    }

    private static void createList(Section subCatPart) {
        List list = new List(true, false, 10);
        list.add(new ListItem("First point"));
        list.add(new ListItem("Second point"));
        list.add(new ListItem("Third point"));
        subCatPart.add(list);
    }

    private static void addEmptyLine(Paragraph paragraph, int number) {
        for (int i = 0; i < number; i++) {
            paragraph.add(new Paragraph(" "));
        }
    }
}
